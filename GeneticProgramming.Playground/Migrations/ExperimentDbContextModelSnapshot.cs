// <auto-generated />
using System;
using GeneticProgramming.Playground.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeneticProgramming.Playground.Migrations
{
    [DbContext(typeof(ExperimentDbContext))]
    partial class ExperimentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("GeneticProgramming.Playground.Data.Models.ExperimentConfigurationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowConstants")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassificationFitnessType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("CrossoverProbability")
                        .HasColumnType("REAL");

                    b.Property<string>("CrossoverType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("ExperimentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxGenerations")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxTreeDepth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxTreeLength")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MutationProbability")
                        .HasColumnType("REAL");

                    b.Property<string>("MutationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("ParsimonyPressure")
                        .HasColumnType("REAL");

                    b.Property<int>("PopulationSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProblemType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("RandomSeed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RegressionFitnessType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TreeCreationMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("UseAdvancedMath")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UseBasicMath")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UseStatistics")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ExperimentId")
                        .IsUnique();

                    b.ToTable("ExperimentConfigurations");
                });

            modelBuilder.Entity("GeneticProgramming.Playground.Data.Models.ExperimentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("BestFitness")
                        .HasColumnType("REAL");

                    b.Property<string>("BestIndividualString")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DatasetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("FinalFitness")
                        .HasColumnType("REAL");

                    b.Property<int>("GenerationsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<double>("InitialFitness")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("TestAccuracy")
                        .HasColumnType("REAL");

                    b.Property<int>("TreeComplexity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StartTime");

                    b.ToTable("Experiments");
                });

            modelBuilder.Entity("GeneticProgramming.Playground.Data.Models.GenerationMetricsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AverageFitness")
                        .HasColumnType("REAL");

                    b.Property<double>("BestFitness")
                        .HasColumnType("REAL");

                    b.Property<int>("BestTreeSize")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Diversity")
                        .HasColumnType("REAL");

                    b.Property<int>("ExperimentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Generation")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<double>("WorstFitness")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ExperimentId", "Generation");

                    b.ToTable("GenerationMetrics");
                });

            modelBuilder.Entity("GeneticProgramming.Playground.Data.Models.ExperimentConfigurationEntity", b =>
                {
                    b.HasOne("GeneticProgramming.Playground.Data.Models.ExperimentEntity", "Experiment")
                        .WithOne("Configuration")
                        .HasForeignKey("GeneticProgramming.Playground.Data.Models.ExperimentConfigurationEntity", "ExperimentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experiment");
                });

            modelBuilder.Entity("GeneticProgramming.Playground.Data.Models.GenerationMetricsEntity", b =>
                {
                    b.HasOne("GeneticProgramming.Playground.Data.Models.ExperimentEntity", "Experiment")
                        .WithMany("GenerationHistory")
                        .HasForeignKey("ExperimentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experiment");
                });

            modelBuilder.Entity("GeneticProgramming.Playground.Data.Models.ExperimentEntity", b =>
                {
                    b.Navigation("Configuration")
                        .IsRequired();

                    b.Navigation("GenerationHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
