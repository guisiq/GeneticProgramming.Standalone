@page "/"
@using Radzen.Blazor
@using GeneticProgramming.Playground.Services
@using GeneticProgramming.Playground.Data
@inject DatasetService DatasetService
@inject DatabaseConfigurationService DatabaseConfigService
@inject NotificationService NotificationService

<PageTitle>Dashboard - GP Playground</PageTitle>

<RadzenText TextStyle="TextStyle.H3" TagName="TagName.H1" class="rz-pt-8">
    üß¨ Genetic Programming Playground
</RadzenText>

<RadzenText TextStyle="TextStyle.Subtitle1" class="rz-pb-4">
    Interactive environment for experimenting with genetic programming algorithms
</RadzenText>

<RadzenRow Gap="2rem" class="rz-pt-4">
    <RadzenColumn Size="12">
        <RadzenCard class="rz-shadow-4">
            <RadzenStack>
                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3">
                    üóÑÔ∏è Database Configuration
                </RadzenText>
                
                <RadzenFormField Text="SQLite Database Path">
                    <RadzenTextBox @bind-Value="databasePath" 
                                 Placeholder="C:\GP_Experiments\experiments.db" 
                                 class="w-100" />
                </RadzenFormField>
                
                <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem">
                    <RadzenButton Text="Set Database Path" 
                                Icon="save" 
                                ButtonStyle="ButtonStyle.Info" 
                                Click="SetDatabasePath" />
                    <RadzenButton Text="Test Connection" 
                                Icon="wifi_protected_setup" 
                                ButtonStyle="ButtonStyle.Secondary" 
                                Click="TestDatabaseConnection" />
                    <RadzenButton Text="Initialize Database" 
                                Icon="storage" 
                                ButtonStyle="ButtonStyle.Warning" 
                                Click="InitializeDatabase" />
                </RadzenStack>
                
                @if (!string.IsNullOrEmpty(databaseStatus))
                {
                    <RadzenAlert AlertStyle="@(databaseConnectionOk ? AlertStyle.Success : AlertStyle.Warning)">
                        @databaseStatus
                    </RadzenAlert>
                }
            </RadzenStack>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

<RadzenRow Gap="2rem" class="rz-pt-4">
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenCard class="rz-shadow-4">
            <RadzenStack>
                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3">
                    üéØ Quick Start
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Body1">
                    Get started with genetic programming experiments:
                </RadzenText>
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                    <RadzenButton Text="New Experiment" 
                                Icon="add_circle" 
                                ButtonStyle="ButtonStyle.Primary" 
                                Click="@(() => Navigation.NavigateTo("/experiments"))" />
                    <RadzenButton Text="View Datasets" 
                                Icon="storage" 
                                ButtonStyle="ButtonStyle.Secondary" 
                                Click="@(() => Navigation.NavigateTo("/datasets"))" />
                    <RadzenButton Text="Compare Results" 
                                Icon="compare_arrows" 
                                ButtonStyle="ButtonStyle.Light" 
                                Click="@(() => Navigation.NavigateTo("/compare"))" />
                </RadzenStack>
            </RadzenStack>
        </RadzenCard>
    </RadzenColumn>

    <RadzenColumn Size="12" SizeMD="6">
        <RadzenCard class="rz-shadow-4">
            <RadzenStack>
                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3">
                    üìä Available Datasets
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Body1">
                    @datasets.Count datasets ready for experimentation
                </RadzenText>
                @foreach (var dataset in datasets.Take(3))
                {
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                        <RadzenIcon Icon="dataset" />
                        <RadzenStack Orientation="Orientation.Vertical" Gap="0">
                            <RadzenText TextStyle="TextStyle.Body2">
                                <strong>@dataset.Name</strong>
                            </RadzenText>
                            <RadzenText TextStyle="TextStyle.Caption">
                                @dataset.Features features, @dataset.Samples samples
                            </RadzenText>
                        </RadzenStack>
                    </RadzenStack>
                }
                @if (datasets.Count > 3)
                {
                    <RadzenText TextStyle="TextStyle.Caption">
                        and @(datasets.Count - 3) more...
                    </RadzenText>
                }
            </RadzenStack>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

<RadzenRow Gap="2rem" class="rz-pt-4">
    <RadzenColumn Size="12">
        <RadzenCard class="rz-shadow-4">
            <RadzenStack>
                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3">
                    ‚ú® Features
                </RadzenText>
                <RadzenRow>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                            <RadzenIcon Icon="tune" Style="font-size: 2rem; color: var(--rz-primary);" />
                            <RadzenStack Orientation="Orientation.Vertical" Gap="0">
                                <RadzenText TextStyle="TextStyle.Subtitle2">
                                    Parameter Tuning
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">
                                    Adjust population size, generations, operators, and more
                                </RadzenText>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                            <RadzenIcon Icon="show_chart" Style="font-size: 2rem; color: var(--rz-success);" />
                            <RadzenStack Orientation="Orientation.Vertical" Gap="0">
                                <RadzenText TextStyle="TextStyle.Subtitle2">
                                    Real-time Metrics
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">
                                    Watch fitness evolution and convergence in real-time
                                </RadzenText>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="4">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                            <RadzenIcon Icon="science" Style="font-size: 2rem; color: var(--rz-info);" />
                            <RadzenStack Orientation="Orientation.Vertical" Gap="0">
                                <RadzenText TextStyle="TextStyle.Subtitle2">
                                    Multiple Datasets
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">
                                    Test on classic ML datasets and synthetic problems
                                </RadzenText>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStack>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

@code {
    [Inject] NavigationManager Navigation { get; set; } = default!;
    
    private List<DatasetInfo> datasets = new();
    private string databasePath = @"C:\GP_Experiments\experiments.db";
    private string databaseStatus = "";
    private bool databaseConnectionOk = false;
    private DatabaseInfo? currentDbInfo;

    protected override async Task OnInitializedAsync()
    {
        datasets = DatasetService.GetAvailableDatasets();
        databasePath = DatabaseConfigService.CurrentDatabasePath;
        await CheckCurrentDatabaseStatus();
    }

    private async Task CheckCurrentDatabaseStatus()
    {
        try
        {
            currentDbInfo = await DatabaseConfigService.GetDatabaseInfoAsync();
            if (currentDbInfo.Exists)
            {
                databaseStatus = $"Database: {currentDbInfo.Path} ({currentDbInfo.ExperimentCount} experiments, {FormatFileSize(currentDbInfo.Size)})";
                databaseConnectionOk = true;
            }
            else
            {
                databaseStatus = $"Database not found: {currentDbInfo.Path}";
                databaseConnectionOk = false;
            }
        }
        catch (Exception ex)
        {
            databaseStatus = $"Database error: {ex.Message}";
            databaseConnectionOk = false;
        }
        
        StateHasChanged();
    }

    private string FormatFileSize(long bytes)
    {
        if (bytes < 1024) return $"{bytes} bytes";
        if (bytes < 1024 * 1024) return $"{bytes / 1024:F1} KB";
        return $"{bytes / (1024 * 1024):F1} MB";
    }

    private async Task SetDatabasePath()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(databasePath))
            {
                NotificationService.Notify(NotificationSeverity.Warning, "Invalid Path", "Please enter a valid database path");
                return;
            }

            var success = await DatabaseConfigService.SetDatabasePathAsync(databasePath);
            if (success)
            {
                await CheckCurrentDatabaseStatus();
                NotificationService.Notify(NotificationSeverity.Success, "Database Path Set", 
                    "Database path updated and initialized successfully!");
            }
            else
            {
                databaseStatus = "Failed to set database path";
                databaseConnectionOk = false;
                NotificationService.Notify(NotificationSeverity.Error, "Database Error", "Failed to set database path");
            }
        }
        catch (Exception ex)
        {
            databaseStatus = $"Error setting database path: {ex.Message}";
            databaseConnectionOk = false;
            NotificationService.Notify(NotificationSeverity.Error, "Database Error", ex.Message);
        }
        
        StateHasChanged();
    }

    private async Task TestDatabaseConnection()
    {
        try
        {
            var canConnect = await DatabaseConfigService.TestConnectionAsync();
            if (canConnect)
            {
                await CheckCurrentDatabaseStatus();
                NotificationService.Notify(NotificationSeverity.Success, "Connection Test", "Database connection successful!");
            }
            else
            {
                databaseStatus = "Database connection failed";
                databaseConnectionOk = false;
                NotificationService.Notify(NotificationSeverity.Error, "Connection Test Failed", "Cannot connect to database");
            }
        }
        catch (Exception ex)
        {
            databaseStatus = $"Database connection failed: {ex.Message}";
            databaseConnectionOk = false;
            NotificationService.Notify(NotificationSeverity.Error, "Connection Test Failed", ex.Message);
        }
        
        StateHasChanged();
    }

    private async Task InitializeDatabase()
    {
        try
        {
            var success = await DatabaseConfigService.InitializeDatabaseAsync();
            if (success)
            {
                await CheckCurrentDatabaseStatus();
                NotificationService.Notify(NotificationSeverity.Success, "Database Initialized", 
                    "Database tables created successfully!");
            }
            else
            {
                databaseStatus = "Database initialization failed";
                databaseConnectionOk = false;
                NotificationService.Notify(NotificationSeverity.Error, "Initialization Failed", "Failed to initialize database");
            }
        }
        catch (Exception ex)
        {
            databaseStatus = $"Database initialization failed: {ex.Message}";
            databaseConnectionOk = false;
            NotificationService.Notify(NotificationSeverity.Error, "Initialization Failed", ex.Message);
        }
        
        StateHasChanged();
    }
}
