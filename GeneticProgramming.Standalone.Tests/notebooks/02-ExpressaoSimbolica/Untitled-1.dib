#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!pwsh

# Testando compila√ß√£o do projeto
cd "C:\Users\lopes\source\repos\GeneticProgramming.Standalone-1"
dotnet build GeneticProgramming.sln --verbosity normal

#!csharp

// Configurando refer√™ncias para o projeto
#r "C:\Users\lopes\source\repos\GeneticProgramming.Standalone-1\bin\Debug\net8.0\GeneticProgramming.Standalone.dll"

using GeneticProgramming.Core;
using GeneticProgramming.Expressions;
using System;
using System.Collections.Generic;
using System.Linq;
using GeneticProgramming.Expressions.Symbols;

Console.WriteLine("‚úÖ Refer√™ncias carregadas com sucesso!");
Console.WriteLine($"üì¶ Assemblies carregados: {AppDomain.CurrentDomain.GetAssemblies().Length}");

#!csharp

// === EXEMPLO 1: Usando S√≠mbolos Matem√°ticos Pr√©-definidos ===
Console.WriteLine("\n=== Exemplo 1: S√≠mbolos Matem√°ticos B√°sicos ===");

// Acessando s√≠mbolos j√° definidos no projeto
var addition = MathematicalSymbols.Addition;
var multiplication = MathematicalSymbols.Multiplication;

Console.WriteLine($"‚úÖ S√≠mbolo de adi√ß√£o: {addition.SymbolName} (arity: {addition.MinimumArity}-{addition.MaximumArity})");
Console.WriteLine($"‚úÖ S√≠mbolo de multiplica√ß√£o: {multiplication.SymbolName} (arity: {multiplication.MinimumArity}-{multiplication.MaximumArity})");

#!csharp

// === EXEMPLO 2: Criando S√≠mbolos Customizados ===
Console.WriteLine("\n=== Exemplo 2: Criando S√≠mbolos Customizados ===");

// Usando SymbolFactory para criar s√≠mbolos
var square = SymbolFactory<double>.CreateUnary(
    "Square", 
    "Square operation (x¬≤)",
    x => x * x);

var power = SymbolFactory<double>.CreateBinary(
    "Power", 
    "Power operation (a^b)",
    (a, b) => Math.Pow(a, b));

Console.WriteLine($"‚úÖ Criado s√≠mbolo Square: {square.SymbolName}");
Console.WriteLine($"‚úÖ Criado s√≠mbolo Power: {power.SymbolName}");

#!csharp

// === EXEMPLO 3: Criando uma Gram√°tica Simples ===
Console.WriteLine("\n=== Exemplo 3: Criando Gram√°tica ===");

var grammar = new SymbolicExpressionTreeGrammar("teste1","Testando gram√°tica simples");

// Adicionando s√≠mbolos matem√°ticos b√°sicos
grammar.AddSymbol(MathematicalSymbols.Addition);
grammar.AddSymbol(MathematicalSymbols.Subtraction);
grammar.AddSymbol(MathematicalSymbols.Multiplication);
grammar.AddSymbol(MathematicalLogarithmicSymbols.Exponential);

Console.WriteLine($"‚úÖ Gram√°tica criada com {grammar.Symbols.Count()} s√≠mbolos");

#!csharp

// === EXEMPLO 4: Criando N√≥s de √Årvore ===
Console.WriteLine("\n=== Exemplo 4: Criando N√≥s de Express√£o ===");

// Criando n√≥s terminais (folhas)
var variableNode = new VariableTreeNode(new Symbols.Variable(), "X");


var constantNode = new SymbolicExpressionTreeNode(
    SymbolFactory<double>.CreateConstant("5", "Constant 5", 5.0));

// Criando n√≥ funcional (opera√ß√£o)
var additionNode = new SymbolicExpressionTreeNode(MathematicalSymbols.Addition);
additionNode.AddSubtree(variableNode);
additionNode.AddSubtree(constantNode);

Console.WriteLine($"‚úÖ Criado n√≥ de adi√ß√£o com {additionNode.Subtrees.Count()} filhos");
Console.WriteLine($"   - Filho 1: {variableNode.Symbol.SymbolName}");
Console.WriteLine($"   - Filho 2: {constantNode.Symbol.SymbolName}");

#!csharp

// === EXEMPLO 5: Criando uma √Årvore de Express√£o Completa ===
Console.WriteLine("\n=== Exemplo 5: √Årvore de Express√£o Completa ===");

var tree = new SymbolicExpressionTree(additionNode);

Console.WriteLine($"‚úÖ √Årvore criada: {tree.Root.Symbol.SymbolName}");
Console.WriteLine($"   Representa a express√£o: X + 5");
Console.WriteLine($"   Altura da √°rvore: {tree.Length}");

// === EXEMPLO 6: Express√£o Mais Complexa (X¬≤ + 5) * 2 ===
Console.WriteLine("\n=== Exemplo 6: Express√£o Complexa (X¬≤ + 5) * 2 ===");

// N√≥s folha
var xNode = new SymbolicExpressionTreeNode(
    SymbolFactory<double>.CreateConstant("X", "Variable X", 3.0)); // X = 3 para teste

var fiveNode = new SymbolicExpressionTreeNode(
    SymbolFactory<double>.CreateConstant("5", "Constant 5", 5.0));

var twoNode = new SymbolicExpressionTreeNode(
    SymbolFactory<double>.CreateConstant("2", "Constant 2", 2.0));

// X¬≤
var squareNode = new SymbolicExpressionTreeNode(square);
squareNode.AddSubtree(xNode);

// X¬≤ + 5
var addNode = new SymbolicExpressionTreeNode(addition);
addNode.AddSubtree(squareNode);
addNode.AddSubtree(fiveNode);

// (X¬≤ + 5) * 2
var multiplyNode = new SymbolicExpressionTreeNode(multiplication);
multiplyNode.AddSubtree(addNode);
multiplyNode.AddSubtree(twoNode);

var complexTree = new SymbolicExpressionTree(multiplyNode);

Console.WriteLine($"‚úÖ √Årvore complexa criada: (X¬≤ + 5) * 2");
Console.WriteLine($"   Altura: {complexTree.Length}");
Console.WriteLine($"   N√∫mero total de n√≥s: {CountNodes(complexTree.Root)}");

// Fun√ß√£o auxiliar para contar n√≥s
int CountNodes(ISymbolicExpressionTreeNode node)
{
    return 1 + node.Subtrees.Sum(child => CountNodes(child));
}

Console.WriteLine("\n=== Resumo dos Componentes Principais ===");
Console.WriteLine("üîπ ISymbol: Interface base para todos os s√≠mbolos");
Console.WriteLine("üîπ FunctionalSymbol<T>: Implementa√ß√£o de s√≠mbolos funcionais");
Console.WriteLine("üîπ SymbolFactory<T>: Factory para criar s√≠mbolos facilmente");
Console.WriteLine("üîπ SymbolicExpressionTreeNode: N√≥s da √°rvore de express√£o");
Console.WriteLine("üîπ SymbolicExpressionTree: √Årvore completa da express√£o");
Console.WriteLine("üîπ SymbolicExpressionTreeGrammar: Conjunto de s√≠mbolos permitidos");
