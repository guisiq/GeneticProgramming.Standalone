using System;
using System.Collections.Generic;

namespace GeneticProgramming.Examples
{
    /// <summary>
    /// Demonstra a diferen√ßa entre ClassificationFitnessEvaluator e ImprovedClassificationFitnessEvaluator
    /// </summary>
    public class FitnessComparison
    {
        public static void DemonstrateExample()
        {
            Console.WriteLine("=== COMPARA√á√ÉO DOS AVALIADORES DE FITNESS ===\n");
            
            // Dataset exemplo: 10 amostras, 4 corretas (40% accuracy)
            var predictions = new double[] { 0.3, 0.7, 0.2, 0.8, 0.4, 0.6, 0.1, 0.9, 0.45, 0.55 };
            var targets = new int[] { 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 };
            
            Console.WriteLine("Predi√ß√µes da √°rvore: [0.3, 0.7, 0.2, 0.8, 0.4, 0.6, 0.1, 0.9, 0.45, 0.55]");
            Console.WriteLine("Targets verdadeiros: [0,   1,   0,   1,   0,   1,   0,   1,   0,    1  ]\n");
            
            // === AVALIADOR ORIGINAL (ClassificationFitnessEvaluator) ===
            Console.WriteLine("üî¥ AVALIADOR ORIGINAL (ClassificationFitnessEvaluator):");
            Console.WriteLine("Regra: predi√ß√£o >= 0.5 ? classe 1 : classe 0");
            Console.WriteLine("Fitness = accuracy = corretos / total\n");
            
            int correctOriginal = 0;
            for (int i = 0; i < predictions.Length; i++)
            {
                int predClass = predictions[i] >= 0.5 ? 1 : 0;
                bool isCorrect = predClass == targets[i];
                if (isCorrect) correctOriginal++;
                
                Console.WriteLine($"Amostra {i+1}: predi√ß√£o={predictions[i]:F2} -> classe={predClass} | target={targets[i]} | {(isCorrect ? "‚úÖ CORRETO" : "‚ùå ERRADO")}");
            }
            
            double fitnessOriginal = (double)correctOriginal / predictions.Length;
            Console.WriteLine($"\nüìä FITNESS FINAL: {correctOriginal}/{predictions.Length} = {fitnessOriginal:F3}");
            
            // === AVALIADOR MELHORADO (ImprovedClassificationFitnessEvaluator) ===
            Console.WriteLine("\n\nüü¢ AVALIADOR MELHORADO (ImprovedClassificationFitnessEvaluator):");
            Console.WriteLine("Regra: fitness suave baseado na dist√¢ncia da predi√ß√£o ao target");
            Console.WriteLine("Normaliza√ß√£o: sigmoid(predi√ß√£o) para manter entre 0-1\n");
            
            double totalScoreImproved = 0.0;
            for (int i = 0; i < predictions.Length; i++)
            {
                // Normaliza usando sigmoid
                double normalizedPred = 1.0 / (1.0 + Math.Exp(-predictions[i]));
                
                // Calcula fitness suave
                double sampleFitness;
                if (targets[i] == 1)
                {
                    sampleFitness = normalizedPred; // Reward predi√ß√µes altas
                }
                else
                {
                    sampleFitness = 1.0 - normalizedPred; // Reward predi√ß√µes baixas
                }
                
                totalScoreImproved += sampleFitness;
                
                Console.WriteLine($"Amostra {i+1}: predi√ß√£o={predictions[i]:F2} -> sigmoid={normalizedPred:F3} | target={targets[i]} | fitness={sampleFitness:F3}");
            }
            
            double fitnessImproved = totalScoreImproved / predictions.Length;
            Console.WriteLine($"\nüìä FITNESS FINAL: {totalScoreImproved:F3}/{predictions.Length} = {fitnessImproved:F3}");
            
            // === AN√ÅLISE DO PROBLEMA ===
            Console.WriteLine("\n\nüß† AN√ÅLISE DO PROBLEMA DE CRESCIMENTO:");
            Console.WriteLine("=======================================");
            
            Console.WriteLine($"\n1Ô∏è‚É£ GRANULARIDADE DO FITNESS:");
            Console.WriteLine($"   ‚Ä¢ Original: Apenas {predictions.Length + 1} valores poss√≠veis (0.0, 0.1, 0.2, ..., 1.0)");
            Console.WriteLine($"   ‚Ä¢ Melhorado: Infinitos valores cont√≠nuos entre 0.0 e 1.0");
            
            Console.WriteLine($"\n2Ô∏è‚É£ GRADIENTE DE EVOLU√á√ÉO:");
            Console.WriteLine($"   ‚Ä¢ Original: SEM gradiente - √°rvore A(0.45‚Üí0) = √°rvore B(0.01‚Üí0) = mesmo fitness");
            Console.WriteLine($"   ‚Ä¢ Melhorado: COM gradiente - √°rvore A(0.45) = 0.389, √°rvore B(0.01) = 0.502");
            
            Console.WriteLine($"\n3Ô∏è‚É£ SELE√á√ÉO PARA CRUZAMENTO:");
            Console.WriteLine($"   ‚Ä¢ Original: Muitas √°rvores com fitness id√™ntico = sele√ß√£o aleat√≥ria");
            Console.WriteLine($"   ‚Ä¢ Melhorado: Cada √°rvore tem fitness √∫nico = sele√ß√£o baseada em qualidade");
            
            Console.WriteLine($"\n4Ô∏è‚É£ PRESS√ÉO EVOLUTIVA:");
            Console.WriteLine($"   ‚Ä¢ Original: Evolu√ß√£o para = SEM press√£o para melhorar");
            Console.WriteLine($"   ‚Ä¢ Melhorado: Sempre h√° dire√ß√£o para melhorar + press√£o de parcim√¥nia");
            
            // === EXEMPLO NUM√âRICO ===
            Console.WriteLine($"\n\nüî¢ EXEMPLO DE POR QUE AS √ÅRVORES N√ÉO CRESCEM:");
            Console.WriteLine("============================================");
            
            Console.WriteLine("Imagine duas √°rvores candidatas:");
            Console.WriteLine("üå± √Årvore Simples: X1 (tamanho=1, predi√ß√£o=0.4 para amostra classe 0)");
            Console.WriteLine("üå≥ √Årvore Complexa: (X1 + X2) * X3 (tamanho=5, predi√ß√£o=0.45 para amostra classe 0)");
            
            Console.WriteLine("\nüìä AVALIA√á√ÉO ORIGINAL:");
            Console.WriteLine("   ‚Ä¢ Simples: 0.4 >= 0.5? N√ÉO ‚Üí classe 0 ‚Üí ‚úÖ CORRETO ‚Üí fitness contribui +1");
            Console.WriteLine("   ‚Ä¢ Complexa: 0.45 >= 0.5? N√ÉO ‚Üí classe 0 ‚Üí ‚úÖ CORRETO ‚Üí fitness contribui +1");
            Console.WriteLine("   ‚Ä¢ RESULTADO: MESMO FITNESS! Algoritmo n√£o v√™ diferen√ßa.");
            
            Console.WriteLine("\nüìä AVALIA√á√ÉO MELHORADA:");
            double simplesNorm = 1.0 / (1.0 + Math.Exp(-0.4));
            double complexaNorm = 1.0 / (1.0 + Math.Exp(-0.45));
            double simplesFit = 1.0 - simplesNorm;
            double complexaFit = 1.0 - complexaNorm;
            
            Console.WriteLine($"   ‚Ä¢ Simples: sigmoid(0.4)={simplesNorm:F3} ‚Üí fitness={simplesFit:F3}");
            Console.WriteLine($"   ‚Ä¢ Complexa: sigmoid(0.45)={complexaNorm:F3} ‚Üí fitness={complexaFit:F3}");
            Console.WriteLine($"   ‚Ä¢ RESULTADO: Complexa √© {complexaFit/simplesFit:F2}x melhor! Algoritmo v√™ a diferen√ßa.");
            
            Console.WriteLine($"\n‚ú® CONCLUS√ÉO:");
            Console.WriteLine($"O avaliador original cria 'plat√¥s de fitness' onde muitas √°rvores diferentes");
            Console.WriteLine($"t√™m exatamente o mesmo score, eliminando a press√£o evolutiva para crescer.");
            Console.WriteLine($"O avaliador melhorado fornece gradientes suaves que guiam a evolu√ß√£o!");
        }
    }
}
